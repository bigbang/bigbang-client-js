"use strict";

/***
*   Generated by PEW.  DO NOT EDIT!
*   Born: 01-10-2016 10:31:45
***/

const pew = require("./PewRuntime");

class WireProtocol {

  constructor() {
    this.protocolId =  0;
    this.protocolHash = '45e7cdbcbf2f1177076bcc924f7dcf8d';
    this.listener = null;
  }

 wrapNetstring( msg ) {
    var msgStr  =  msg.messageType +":" + msg.serializeJson();
    return pew.encodeNetstring(msgStr);
 }


 dispatchNetstring( s )  {
     const idx = s.indexOf(":");
     let msgBody = s.substr(idx + 1);
     const t = parseInt( s.substr(0,idx));

     switch(t) {
                 case 0:
                   var WireChannelDataCreate_msg = new WireChannelDataCreate();
                   WireChannelDataCreate_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataCreate( WireChannelDataCreate_msg );

                   break;
                 case 1:
                   var WireChannelDataDel_msg = new WireChannelDataDel();
                   WireChannelDataDel_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataDel( WireChannelDataDel_msg );

                   break;
                 case 2:
                   var WireChannelDataDelete_msg = new WireChannelDataDelete();
                   WireChannelDataDelete_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataDelete( WireChannelDataDelete_msg );

                   break;
                 case 3:
                   var WireChannelDataPut_msg = new WireChannelDataPut();
                   WireChannelDataPut_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataPut( WireChannelDataPut_msg );

                   break;
                 case 4:
                   var WireChannelDataUpdate_msg = new WireChannelDataUpdate();
                   WireChannelDataUpdate_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataUpdate( WireChannelDataUpdate_msg );

                   break;
                 case 5:
                   var WireChannelJoin_msg = new WireChannelJoin();
                   WireChannelJoin_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelJoin( WireChannelJoin_msg );

                   break;
                 case 6:
                   var WireChannelLeave_msg = new WireChannelLeave();
                   WireChannelLeave_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelLeave( WireChannelLeave_msg );

                   break;
                 case 7:
                   var WireChannelMessage_msg = new WireChannelMessage();
                   WireChannelMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelMessage( WireChannelMessage_msg );

                   break;
                 case 8:
                   var WireChannelSubscribe_msg = new WireChannelSubscribe();
                   WireChannelSubscribe_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelSubscribe( WireChannelSubscribe_msg );

                   break;
                 case 9:
                   var WireChannelUnSubscribe_msg = new WireChannelUnSubscribe();
                   WireChannelUnSubscribe_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelUnSubscribe( WireChannelUnSubscribe_msg );

                   break;
                 case 10:
                   var WireConnectFailure_msg = new WireConnectFailure();
                   WireConnectFailure_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectFailure( WireConnectFailure_msg );

                   break;
                 case 11:
                   var WireConnectRequest_msg = new WireConnectRequest();
                   WireConnectRequest_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectRequest( WireConnectRequest_msg );

                   break;
                 case 12:
                   var WireConnectSuccess_msg = new WireConnectSuccess();
                   WireConnectSuccess_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectSuccess( WireConnectSuccess_msg );

                   break;
                 case 13:
                   var WireDisconnectRequest_msg = new WireDisconnectRequest();
                   WireDisconnectRequest_msg.deserializeJson( msgBody );
                   this.listener.onWireDisconnectRequest( WireDisconnectRequest_msg );

                   break;
                 case 14:
                   var WireDisconnectSuccess_msg = new WireDisconnectSuccess();
                   WireDisconnectSuccess_msg.deserializeJson( msgBody );
                   this.listener.onWireDisconnectSuccess( WireDisconnectSuccess_msg );

                   break;
                 case 15:
                   var WirePing_msg = new WirePing();
                   WirePing_msg.deserializeJson( msgBody );
                   this.listener.onWirePing( WirePing_msg );

                   break;
                 case 16:
                   var WirePong_msg = new WirePong();
                   WirePong_msg.deserializeJson( msgBody );
                   this.listener.onWirePong( WirePong_msg );

                   break;
                 case 17:
                   var WireQueueMessage_msg = new WireQueueMessage();
                   WireQueueMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireQueueMessage( WireQueueMessage_msg );

                   break;
                 case 18:
                   var WireRpcMessage_msg = new WireRpcMessage();
                   WireRpcMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireRpcMessage( WireRpcMessage_msg );

                   break;
                 case 19:
                   var WireRpcRequest_msg = new WireRpcRequest();
                   WireRpcRequest_msg.deserializeJson( msgBody );
                   this.listener.onWireRpcRequest( WireRpcRequest_msg );

                   break;
                 case 20:
                   var WireRpcResponse_msg = new WireRpcResponse();
                   WireRpcResponse_msg.deserializeJson( msgBody );
                   this.listener.onWireRpcResponse( WireRpcResponse_msg );

                   break;

     }

 }
}

class WireChannelDataCreate {

    constructor( ) {
        this.messageType = 0;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'key','ks','name','payload',];
        // Bitmask flags for optional field serialization support
        this.key_IS_SET = 1 << 0;
        this.ks_IS_SET = 1 << 1;
        this.name_IS_SET = 1 << 2;
        this.payload_IS_SET = 1 << 3;

    }


    get key () {
      return this._key;
    }

    set key( v ) {
      this._key = v;

      if(v) {
        this.setPewBitmask( this.key_IS_SET );
      }
    }
    get ks () {
      return this._ks;
    }

    set ks( v ) {
      this._ks = v;

      if(v) {
        this.setPewBitmask( this.ks_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelDataDel {

    constructor( ) {
        this.messageType = 1;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'key','ks','name',];
        // Bitmask flags for optional field serialization support
        this.key_IS_SET = 1 << 0;
        this.ks_IS_SET = 1 << 1;
        this.name_IS_SET = 1 << 2;

    }


    get key () {
      return this._key;
    }

    set key( v ) {
      this._key = v;

      if(v) {
        this.setPewBitmask( this.key_IS_SET );
      }
    }
    get ks () {
      return this._ks;
    }

    set ks( v ) {
      this._ks = v;

      if(v) {
        this.setPewBitmask( this.ks_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelDataDelete {

    constructor( ) {
        this.messageType = 2;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'key','ks','name','payload',];
        // Bitmask flags for optional field serialization support
        this.key_IS_SET = 1 << 0;
        this.ks_IS_SET = 1 << 1;
        this.name_IS_SET = 1 << 2;
        this.payload_IS_SET = 1 << 3;

    }


    get key () {
      return this._key;
    }

    set key( v ) {
      this._key = v;

      if(v) {
        this.setPewBitmask( this.key_IS_SET );
      }
    }
    get ks () {
      return this._ks;
    }

    set ks( v ) {
      this._ks = v;

      if(v) {
        this.setPewBitmask( this.ks_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelDataPut {

    constructor( ) {
        this.messageType = 3;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'key','ks','name','payload',];
        // Bitmask flags for optional field serialization support
        this.key_IS_SET = 1 << 0;
        this.ks_IS_SET = 1 << 1;
        this.name_IS_SET = 1 << 2;
        this.payload_IS_SET = 1 << 3;

    }


    get key () {
      return this._key;
    }

    set key( v ) {
      this._key = v;

      if(v) {
        this.setPewBitmask( this.key_IS_SET );
      }
    }
    get ks () {
      return this._ks;
    }

    set ks( v ) {
      this._ks = v;

      if(v) {
        this.setPewBitmask( this.ks_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelDataUpdate {

    constructor( ) {
        this.messageType = 4;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'key','ks','name','payload',];
        // Bitmask flags for optional field serialization support
        this.key_IS_SET = 1 << 0;
        this.ks_IS_SET = 1 << 1;
        this.name_IS_SET = 1 << 2;
        this.payload_IS_SET = 1 << 3;

    }


    get key () {
      return this._key;
    }

    set key( v ) {
      this._key = v;

      if(v) {
        this.setPewBitmask( this.key_IS_SET );
      }
    }
    get ks () {
      return this._ks;
    }

    set ks( v ) {
      this._ks = v;

      if(v) {
        this.setPewBitmask( this.ks_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelJoin {

    constructor( ) {
        this.messageType = 5;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'name','success','channelPermissions','errorMessage',];
        // Bitmask flags for optional field serialization support
        this.name_IS_SET = 1 << 0;
        this.success_IS_SET = 1 << 1;
        this.channelPermissions_IS_SET = 1 << 2;
        this.errorMessage_IS_SET = 1 << 3;

    }


    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get success () {
      return this._success;
    }

    set success( v ) {
      this._success = v;

      if(v) {
        this.setPewBitmask( this.success_IS_SET );
      }
    }
    get channelPermissions () {
      return this._channelPermissions;
    }

    set channelPermissions( v ) {
      this._channelPermissions = v;

      if(v) {
        this.setPewBitmask( this.channelPermissions_IS_SET );
      }
    }
    get errorMessage () {
      return this._errorMessage;
    }

    set errorMessage( v ) {
      this._errorMessage = v;

      if(v) {
        this.setPewBitmask( this.errorMessage_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;
        this.success = obj.success;

        this.channelPermissions = obj.channelPermissions;

        this.errorMessage = obj.errorMessage;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelLeave {

    constructor( ) {
        this.messageType = 6;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'name',];
        // Bitmask flags for optional field serialization support
        this.name_IS_SET = 1 << 0;

    }


    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelMessage {

    constructor( ) {
        this.messageType = 7;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'senderId','name','payload',];
        // Bitmask flags for optional field serialization support
        this.senderId_IS_SET = 1 << 0;
        this.name_IS_SET = 1 << 1;
        this.payload_IS_SET = 1 << 2;

    }


    get senderId () {
      return this._senderId;
    }

    set senderId( v ) {
      this._senderId = v;

      if(v) {
        this.setPewBitmask( this.senderId_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.senderId = obj.senderId;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelSubscribe {

    constructor( ) {
        this.messageType = 8;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'name','jsonConfig',];
        // Bitmask flags for optional field serialization support
        this.name_IS_SET = 1 << 0;
        this.jsonConfig_IS_SET = 1 << 1;

    }


    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get jsonConfig () {
      return this._jsonConfig;
    }

    set jsonConfig( v ) {
      this._jsonConfig = v;

      if(v) {
        this.setPewBitmask( this.jsonConfig_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;
        this.jsonConfig = obj.jsonConfig;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireChannelUnSubscribe {

    constructor( ) {
        this.messageType = 9;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'name',];
        // Bitmask flags for optional field serialization support
        this.name_IS_SET = 1 << 0;

    }


    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireConnectFailure {

    constructor( ) {
        this.messageType = 10;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'failureMessage',];
        // Bitmask flags for optional field serialization support
        this.failureMessage_IS_SET = 1 << 0;

    }


    get failureMessage () {
      return this._failureMessage;
    }

    set failureMessage( v ) {
      this._failureMessage = v;

      if(v) {
        this.setPewBitmask( this.failureMessage_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.failureMessage = obj.failureMessage;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireConnectRequest {

    constructor( ) {
        this.messageType = 11;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'version','clientKey',];
        // Bitmask flags for optional field serialization support
        this.version_IS_SET = 1 << 0;
        this.clientKey_IS_SET = 1 << 1;

    }


    get version () {
      return this._version;
    }

    set version( v ) {
      this._version = v;

      if(v) {
        this.setPewBitmask( this.version_IS_SET );
      }
    }
    get clientKey () {
      return this._clientKey;
    }

    set clientKey( v ) {
      this._clientKey = v;

      if(v) {
        this.setPewBitmask( this.clientKey_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.version = obj.version;
        this.clientKey = obj.clientKey;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireConnectSuccess {

    constructor( ) {
        this.messageType = 12;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'clientId','clientToServerPingMS',];
        // Bitmask flags for optional field serialization support
        this.clientId_IS_SET = 1 << 0;
        this.clientToServerPingMS_IS_SET = 1 << 1;

    }


    get clientId () {
      return this._clientId;
    }

    set clientId( v ) {
      this._clientId = v;

      if(v) {
        this.setPewBitmask( this.clientId_IS_SET );
      }
    }
    get clientToServerPingMS () {
      return this._clientToServerPingMS;
    }

    set clientToServerPingMS( v ) {
      this._clientToServerPingMS = v;

      if(v) {
        this.setPewBitmask( this.clientToServerPingMS_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.clientId = obj.clientId;
        this.clientToServerPingMS = obj.clientToServerPingMS;

    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireDisconnectRequest {

    constructor( ) {
        this.messageType = 13;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', ];
        // Bitmask flags for optional field serialization support
    }



    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireDisconnectSuccess {

    constructor( ) {
        this.messageType = 14;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', ];
        // Bitmask flags for optional field serialization support
    }



    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WirePing {

    constructor( ) {
        this.messageType = 15;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', ];
        // Bitmask flags for optional field serialization support
    }



    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WirePong {

    constructor( ) {
        this.messageType = 16;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', ];
        // Bitmask flags for optional field serialization support
    }



    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireQueueMessage {

    constructor( ) {
        this.messageType = 17;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'id','name','payload',];
        // Bitmask flags for optional field serialization support
        this.id_IS_SET = 1 << 0;
        this.name_IS_SET = 1 << 1;
        this.payload_IS_SET = 1 << 2;

    }


    get id () {
      return this._id;
    }

    set id( v ) {
      this._id = v;

      if(v) {
        this.setPewBitmask( this.id_IS_SET );
      }
    }
    get name () {
      return this._name;
    }

    set name( v ) {
      this._name = v;

      if(v) {
        this.setPewBitmask( this.name_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.name = obj.name;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireRpcMessage {

    constructor( ) {
        this.messageType = 18;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'id','ns','payload',];
        // Bitmask flags for optional field serialization support
        this.id_IS_SET = 1 << 0;
        this.ns_IS_SET = 1 << 1;
        this.payload_IS_SET = 1 << 2;

    }


    get id () {
      return this._id;
    }

    set id( v ) {
      this._id = v;

      if(v) {
        this.setPewBitmask( this.id_IS_SET );
      }
    }
    get ns () {
      return this._ns;
    }

    set ns( v ) {
      this._ns = v;

      if(v) {
        this.setPewBitmask( this.ns_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.ns = obj.ns;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireRpcRequest {

    constructor( ) {
        this.messageType = 19;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'id','channel','endpoint','payload',];
        // Bitmask flags for optional field serialization support
        this.id_IS_SET = 1 << 0;
        this.channel_IS_SET = 1 << 1;
        this.endpoint_IS_SET = 1 << 2;
        this.payload_IS_SET = 1 << 3;

    }


    get id () {
      return this._id;
    }

    set id( v ) {
      this._id = v;

      if(v) {
        this.setPewBitmask( this.id_IS_SET );
      }
    }
    get channel () {
      return this._channel;
    }

    set channel( v ) {
      this._channel = v;

      if(v) {
        this.setPewBitmask( this.channel_IS_SET );
      }
    }
    get endpoint () {
      return this._endpoint;
    }

    set endpoint( v ) {
      this._endpoint = v;

      if(v) {
        this.setPewBitmask( this.endpoint_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.channel = obj.channel;
        this.endpoint = obj.endpoint;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 
class WireRpcResponse {

    constructor( ) {
        this.messageType = 20;
        this._pew_bitmask_ = 0;
        this._replacer = [ '_pew_bitmask_', 'id','error','payload',];
        // Bitmask flags for optional field serialization support
        this.id_IS_SET = 1 << 0;
        this.error_IS_SET = 1 << 1;
        this.payload_IS_SET = 1 << 2;

    }


    get id () {
      return this._id;
    }

    set id( v ) {
      this._id = v;

      if(v) {
        this.setPewBitmask( this.id_IS_SET );
      }
    }
    get error () {
      return this._error;
    }

    set error( v ) {
      this._error = v;

      if(v) {
        this.setPewBitmask( this.error_IS_SET );
      }
    }
    get payload () {
      return this._payload;
    }

    set payload( v ) {
      this._payload = v;

      if(v) {
        this.setPewBitmask( this.payload_IS_SET );
      }
    }


    serializeJson( ) {
        return JSON.stringify(this, this._replacer);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.error = obj.error;
        this.payload = new pew.ByteArray( obj.payload );


    }

    setPewBitmask(flag)  {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag)  {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag) {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 

module.exports = {
    WireProtocol: WireProtocol,
        WireChannelDataCreate: WireChannelDataCreate,
        WireChannelDataDel: WireChannelDataDel,
        WireChannelDataDelete: WireChannelDataDelete,
        WireChannelDataPut: WireChannelDataPut,
        WireChannelDataUpdate: WireChannelDataUpdate,
        WireChannelJoin: WireChannelJoin,
        WireChannelLeave: WireChannelLeave,
        WireChannelMessage: WireChannelMessage,
        WireChannelSubscribe: WireChannelSubscribe,
        WireChannelUnSubscribe: WireChannelUnSubscribe,
        WireConnectFailure: WireConnectFailure,
        WireConnectRequest: WireConnectRequest,
        WireConnectSuccess: WireConnectSuccess,
        WireDisconnectRequest: WireDisconnectRequest,
        WireDisconnectSuccess: WireDisconnectSuccess,
        WirePing: WirePing,
        WirePong: WirePong,
        WireQueueMessage: WireQueueMessage,
        WireRpcMessage: WireRpcMessage,
        WireRpcRequest: WireRpcRequest,
        WireRpcResponse: WireRpcResponse,

}