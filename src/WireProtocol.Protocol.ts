/*
 BSD LICENSE

 Copyright (c) 2015, Big Bang IO, LLC
 All rights reserved.

 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/***
*   Generated by PEW.  DO NOT EDIT!
***/

// Note, used to have a ref path for require.js -- tig
///<reference path="PewRuntime.ts"/>
import pew = require("./PewRuntime");

export class WireProtocol implements pew.PewProtocol  {


  constructor() {
    this.protocolId =  0;
    this.protocolHash = 'd96a44664eff8b2a710ded18e07ab927';
  }

  listener : WireProtocolProtocolListener;
  protocolId: number;
  protocolHash: string;

 wrapNetstring( msg: pew.PewMessage ) : string {
    var msgStr:string  =  msg.messageType +":" + msg.serializeJson();
    return pew.encodeNetstring(msgStr);
 }


 dispatchNetstring( s:string)  {
     var idx:number = s.indexOf(":");
     var msgBody:string = s.substr(idx + 1);
     var t:number = parseInt( s.substr(0,idx));

     switch(t) {
                 case 0:
                   var WireChannelDataCreate_msg: WireChannelDataCreate = new WireChannelDataCreate();
                   WireChannelDataCreate_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataCreate( WireChannelDataCreate_msg );

                   break;
                 case 1:
                   var WireChannelDataDel_msg: WireChannelDataDel = new WireChannelDataDel();
                   WireChannelDataDel_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataDel( WireChannelDataDel_msg );

                   break;
                 case 2:
                   var WireChannelDataDelete_msg: WireChannelDataDelete = new WireChannelDataDelete();
                   WireChannelDataDelete_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataDelete( WireChannelDataDelete_msg );

                   break;
                 case 3:
                   var WireChannelDataPut_msg: WireChannelDataPut = new WireChannelDataPut();
                   WireChannelDataPut_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataPut( WireChannelDataPut_msg );

                   break;
                 case 4:
                   var WireChannelDataUpdate_msg: WireChannelDataUpdate = new WireChannelDataUpdate();
                   WireChannelDataUpdate_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelDataUpdate( WireChannelDataUpdate_msg );

                   break;
                 case 5:
                   var WireChannelJoin_msg: WireChannelJoin = new WireChannelJoin();
                   WireChannelJoin_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelJoin( WireChannelJoin_msg );

                   break;
                 case 6:
                   var WireChannelLeave_msg: WireChannelLeave = new WireChannelLeave();
                   WireChannelLeave_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelLeave( WireChannelLeave_msg );

                   break;
                 case 7:
                   var WireChannelMessage_msg: WireChannelMessage = new WireChannelMessage();
                   WireChannelMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelMessage( WireChannelMessage_msg );

                   break;
                 case 8:
                   var WireChannelSubscribe_msg: WireChannelSubscribe = new WireChannelSubscribe();
                   WireChannelSubscribe_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelSubscribe( WireChannelSubscribe_msg );

                   break;
                 case 9:
                   var WireChannelUnSubscribe_msg: WireChannelUnSubscribe = new WireChannelUnSubscribe();
                   WireChannelUnSubscribe_msg.deserializeJson( msgBody );
                   this.listener.onWireChannelUnSubscribe( WireChannelUnSubscribe_msg );

                   break;
                 case 10:
                   var WireConnectFailure_msg: WireConnectFailure = new WireConnectFailure();
                   WireConnectFailure_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectFailure( WireConnectFailure_msg );

                   break;
                 case 11:
                   var WireConnectRequest_msg: WireConnectRequest = new WireConnectRequest();
                   WireConnectRequest_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectRequest( WireConnectRequest_msg );

                   break;
                 case 12:
                   var WireConnectSuccess_msg: WireConnectSuccess = new WireConnectSuccess();
                   WireConnectSuccess_msg.deserializeJson( msgBody );
                   this.listener.onWireConnectSuccess( WireConnectSuccess_msg );

                   break;
                 case 13:
                   var WireDisconnectRequest_msg: WireDisconnectRequest = new WireDisconnectRequest();
                   WireDisconnectRequest_msg.deserializeJson( msgBody );
                   this.listener.onWireDisconnectRequest( WireDisconnectRequest_msg );

                   break;
                 case 14:
                   var WireDisconnectSuccess_msg: WireDisconnectSuccess = new WireDisconnectSuccess();
                   WireDisconnectSuccess_msg.deserializeJson( msgBody );
                   this.listener.onWireDisconnectSuccess( WireDisconnectSuccess_msg );

                   break;
                 case 15:
                   var WirePing_msg: WirePing = new WirePing();
                   WirePing_msg.deserializeJson( msgBody );
                   this.listener.onWirePing( WirePing_msg );

                   break;
                 case 16:
                   var WirePong_msg: WirePong = new WirePong();
                   WirePong_msg.deserializeJson( msgBody );
                   this.listener.onWirePong( WirePong_msg );

                   break;
                 case 17:
                   var WireQueueMessage_msg: WireQueueMessage = new WireQueueMessage();
                   WireQueueMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireQueueMessage( WireQueueMessage_msg );

                   break;
                 case 18:
                   var WireRpcMessage_msg: WireRpcMessage = new WireRpcMessage();
                   WireRpcMessage_msg.deserializeJson( msgBody );
                   this.listener.onWireRpcMessage( WireRpcMessage_msg );

                   break;

     }

 }
}

export interface WireProtocolProtocolListener {
        onWireChannelDataCreate(  msg:WireChannelDataCreate ); 
        onWireChannelDataDel(  msg:WireChannelDataDel ); 
        onWireChannelDataDelete(  msg:WireChannelDataDelete ); 
        onWireChannelDataPut(  msg:WireChannelDataPut ); 
        onWireChannelDataUpdate(  msg:WireChannelDataUpdate ); 
        onWireChannelJoin(  msg:WireChannelJoin ); 
        onWireChannelLeave(  msg:WireChannelLeave ); 
        onWireChannelMessage(  msg:WireChannelMessage ); 
        onWireChannelSubscribe(  msg:WireChannelSubscribe ); 
        onWireChannelUnSubscribe(  msg:WireChannelUnSubscribe ); 
        onWireConnectFailure(  msg:WireConnectFailure ); 
        onWireConnectRequest(  msg:WireConnectRequest ); 
        onWireConnectSuccess(  msg:WireConnectSuccess ); 
        onWireDisconnectRequest(  msg:WireDisconnectRequest ); 
        onWireDisconnectSuccess(  msg:WireDisconnectSuccess ); 
        onWirePing(  msg:WirePing ); 
        onWirePong(  msg:WirePong ); 
        onWireQueueMessage(  msg:WireQueueMessage ); 
        onWireRpcMessage(  msg:WireRpcMessage ); 

}

export class WireChannelDataCreate implements pew.PewMessage {

    constructor( ) {
        this.messageType = 0;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static key_IS_SET : number = 1 << 0;
    private static ks_IS_SET : number = 1 << 1;
    private static name_IS_SET : number = 1 << 2;
    private static payload_IS_SET : number = 1 << 3;



    key: string;
    ks: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelDataDel implements pew.PewMessage {

    constructor( ) {
        this.messageType = 1;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static key_IS_SET : number = 1 << 0;
    private static ks_IS_SET : number = 1 << 1;
    private static name_IS_SET : number = 1 << 2;



    key: string;
    ks: string;
    name: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelDataDelete implements pew.PewMessage {

    constructor( ) {
        this.messageType = 2;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static key_IS_SET : number = 1 << 0;
    private static ks_IS_SET : number = 1 << 1;
    private static name_IS_SET : number = 1 << 2;
    private static payload_IS_SET : number = 1 << 3;



    key: string;
    ks: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelDataPut implements pew.PewMessage {

    constructor( ) {
        this.messageType = 3;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static key_IS_SET : number = 1 << 0;
    private static ks_IS_SET : number = 1 << 1;
    private static name_IS_SET : number = 1 << 2;
    private static payload_IS_SET : number = 1 << 3;



    key: string;
    ks: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelDataUpdate implements pew.PewMessage {

    constructor( ) {
        this.messageType = 4;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static key_IS_SET : number = 1 << 0;
    private static ks_IS_SET : number = 1 << 1;
    private static name_IS_SET : number = 1 << 2;
    private static payload_IS_SET : number = 1 << 3;



    key: string;
    ks: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.key = obj.key;
        this.ks = obj.ks;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelJoin implements pew.PewMessage {

    constructor( ) {
        this.messageType = 5;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static name_IS_SET : number = 1 << 0;
    private static success_IS_SET : number = 1 << 1;
    private static channelPermissions_IS_SET : number = 1 << 2;
    private static errorMessage_IS_SET : number = 1 << 3;



    name: string;
    success: boolean;
    channelPermissions: string[];
    errorMessage: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;
        this.success = obj.success;

        this.channelPermissions = obj.channelPermissions;

        this.errorMessage = obj.errorMessage;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelLeave implements pew.PewMessage {

    constructor( ) {
        this.messageType = 6;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static name_IS_SET : number = 1 << 0;



    name: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelMessage implements pew.PewMessage {

    constructor( ) {
        this.messageType = 7;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static senderId_IS_SET : number = 1 << 0;
    private static name_IS_SET : number = 1 << 1;
    private static payload_IS_SET : number = 1 << 2;



    senderId: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.senderId = obj.senderId;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelSubscribe implements pew.PewMessage {

    constructor( ) {
        this.messageType = 8;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static name_IS_SET : number = 1 << 0;
    private static jsonConfig_IS_SET : number = 1 << 1;



    name: string;
    jsonConfig: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;
        this.jsonConfig = obj.jsonConfig;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireChannelUnSubscribe implements pew.PewMessage {

    constructor( ) {
        this.messageType = 9;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static name_IS_SET : number = 1 << 0;



    name: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.name = obj.name;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireConnectFailure implements pew.PewMessage {

    constructor( ) {
        this.messageType = 10;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static failureMessage_IS_SET : number = 1 << 0;



    failureMessage: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.failureMessage = obj.failureMessage;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireConnectRequest implements pew.PewMessage {

    constructor( ) {
        this.messageType = 11;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static version_IS_SET : number = 1 << 0;
    private static clientKey_IS_SET : number = 1 << 1;



    version: number;
    clientKey: string;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.version = obj.version;
        this.clientKey = obj.clientKey;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireConnectSuccess implements pew.PewMessage {

    constructor( ) {
        this.messageType = 12;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static clientId_IS_SET : number = 1 << 0;
    private static clientToServerPingMS_IS_SET : number = 1 << 1;



    clientId: string;
    clientToServerPingMS: number;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.clientId = obj.clientId;
        this.clientToServerPingMS = obj.clientToServerPingMS;

    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireDisconnectRequest implements pew.PewMessage {

    constructor( ) {
        this.messageType = 13;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support


    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireDisconnectSuccess implements pew.PewMessage {

    constructor( ) {
        this.messageType = 14;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support


    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WirePing implements pew.PewMessage {

    constructor( ) {
        this.messageType = 15;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support


    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WirePong implements pew.PewMessage {

    constructor( ) {
        this.messageType = 16;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support


    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireQueueMessage implements pew.PewMessage {

    constructor( ) {
        this.messageType = 17;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static id_IS_SET : number = 1 << 0;
    private static name_IS_SET : number = 1 << 1;
    private static payload_IS_SET : number = 1 << 2;



    id: string;
    name: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.name = obj.name;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} export class WireRpcMessage implements pew.PewMessage {

    constructor( ) {
        this.messageType = 18;
    }

    messageType: number;

    // Bitmask flags for optional field serialization support
    private static id_IS_SET : number = 1 << 0;
    private static ns_IS_SET : number = 1 << 1;
    private static payload_IS_SET : number = 1 << 2;



    id: string;
    ns: string;
    payload: pew.ByteArray;

    _pew_bitmask_:number;

    serializeJson( ) {
        return JSON.stringify(this);
    }

    deserializeJson( json ) {
        var obj = JSON.parse( json );
        this.id = obj.id;
        this.ns = obj.ns;
        this.payload = new pew.ByteArray( <string>obj.payload );


    }

    setPewBitmask(flag:number) : void {
        this._pew_bitmask_ |= flag;
    }

    unsetPewBitmask(flag:number) : void {
        this._pew_bitmask_ &= flag;
    }

    pewBitmaskIsSetFor(flag:number) : boolean {
        return (this._pew_bitmask_ & flag) == flag;
    }

} 